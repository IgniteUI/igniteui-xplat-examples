trigger:
  branches:
    include:
    - vnext
    - master
  paths:
    include:
      - 'samples/**/*.json'

pr:
  branches:
    include:
    - 'vnext'  # must quote since "*" is a YAML reserved character; we want a string

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)
variables:
  - name: 'pathsToParse'
    value: '$(Pipeline.Workspace)\xplatеxamples\samples\grids,$(Pipeline.Workspace)\xplatеxamples\samples\charts'

resources:
  repositories:
    - repository: IgniteUIAngularExamples
      endpoint: IgniteUI
      type: github
      name: IgniteUI/igniteui-angular-examples
      ref: 'vnext'

    - repository: IgniteUIBlazorExamples
      endpoint: IgniteUI
      type: github
      name: IgniteUI/igniteui-blazor-examples
      ref: 'vnext'

    - repository: IgniteUIReactExamples
      endpoint: IgniteUI
      type: github
      name: IgniteUI/igniteui-react-examples
      ref: 'vnext'

    - repository: IgniteUIWebComponentsExamples
      endpoint: IgniteUI
      type: github
      name: IgniteUI/igniteui-wc-examples
      ref: 'vnext'

    - repository: IgEditorTemplates
      type: git
      name: igeditor-templates
      ref: 'master'

    - repository: CodeGenerationLibrary
      type: git
      name: code-generation-library
      ref: '2022.2'

pool:
  name: BuildAgentOnPrem

stages:
- stage: Prepare
  jobs: 
  - job: PrepareJsons
    steps:
    - checkout: self

    - task: UseDotNet@2
      displayName: 'Use .NET 6'
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - task: PowerShell@2
      displayName: "Remove json files where 'export' flag is false or missing"
      inputs:
        targetType: 'inline'
        script: |
          Write-Output "Chocolatey install jq - tool to traverse JSON files"
          Invoke-Expression -Command "choco install jq -y"

          Invoke-Expression -ErrorAction Stop -Command 'foreach ($jsonFile in Get-ChildItem "samples" -Filter "*.json" -Recurse)' +
              '{ ' +
                'Write-Output "Parsing $($jsonFile.FullName)"; ' +
                '$exportFlag = $(jq .export $jsonFile.FullName -e); ' +
                'if ($exportFlag -eq $null -Or $exportFlag -eq "false") {' +
                    'Remove-Item $jsonFile.FullName; ' +
                    'Write-Output "Removed $($jsonFile.FullName) - export flag is false or missing"' +
                '}' +
              '}
        showWarnings: true
        ignoreLASTEXITCODE: true
        pwsh: true

    - publish: '$(Build.SourcesDirectory)'
      displayName: 'Publish XPlat Example JSONs'
      artifact: xplatеxamples

- stage: Convert
#  dependsOn: Prepare
  jobs:
  - job: BuildAngular
    workspace:
      clean: all
    steps:
    - checkout: self
      enabled: false

    - download: current
      displayName: 'Get XPlat Example JSONs'
      artifact: xplatеxamples
      #target:

    - task: UseDotNet@2
      displayName: 'Use .NET 6'
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - checkout: IgEditorTemplates

    - checkout: CodeGenerationLibrary

    - task: DownloadPipelineArtifact@2
      displayName: 'Get CodeExporterApp'
      inputs:
        buildType: 'specific'
        project: 'edba4b16-462e-42a0-9fa0-254d6d8a0f41'
        definition: '261'
        buildVersionToDownload: 'latestFromBranch'
        branchName: 'refs/heads/2022.2'
        artifactName: 'CodeExporterApp'
        targetPath: '$(Build.SourcesDirectory)\CodeExporterApp'

    - checkout: IgniteUIAngularExamples
    - task: PowerShell@2
      displayName: 'Convert Angular'
      inputs:
        targetType: 'inline'
        script: |
         Invoke-Expression -ErrorAction Stop -Command ' $(Build.SourcesDirectory)\CodeExporterApp\CodeExporter.App.exe ' +
          '-platform=angular ' +
          '-template=$(Build.SourcesDirectory)\igeditor-templates\Angular\main-template ' +
          '-library=$(Build.SourcesDirectory)\code-generation-library ' +
          '-output=$(Build.SourcesDirectory)\igniteui-angular-examples\samples\ ' +
          '-source=$(pathsToParse)\bahur '
        errorActionPreference: 'stop'
        failOnStderr: true
        showWarnings: true
        pwsh: true

    - task: PowerShell@2
      displayName: 'Get changed files'
      inputs:
        targetType: 'inline'
        script: |
          ## get the changed files
          $files=$(git diff-tree --diff-filter=d --no-commit-id --name-only -r $(Build.SourceVersion))
          $temp=$files -split ' '
          $count=$temp.Length
          echo "Total changed $count files"
        
          For ($i=0; $i -lt $temp.Length; $i++)
          {
            $name=$temp[$i]
            echo "this is $name file"
            if ($name -like 'f1/*')  #if f1 is a subfolder under a folder use "- like '*/f1/*'"
            { 
              ##achive folder f1 if it is changed.
              ##Compress-Archive -Path $(system.defaultworkingdirectory)/f1 -DestinationPath $(Build.ArtifactStagingDirectory)/f1.zip
              
              ##set the flag variable f1Flag to true
              Write-Host "##vso[task.setvariable variable=f2Flag]true"
            }
            if ($name -like 'f2/*')
            {
              ##achive folder f2 if it is changed.
              ##Compress-Archive -Path $(system.defaultworkingdirectory)/f2 -DestinationPath $(Build.ArtifactStagingDirectory)/f2.zip
              ##set the flag variable f2Flag to true
              Write-Host "##vso[task.setvariable variable=f2Flag]True"
            }
          }
          ## create a temp folder to hold the changed files
          New-Item -ItemType directory -Path $(system.defaultworkingdirectory)\temp

          foreach($file in $temp){
            if(Test-Path -path $file){
            Copy-Item -Path $file -Destination $(system.defaultworkingdirectory)\temp
            }
          }
          ## zip the temp folder which only have the changed files
          Compress-Archive -Path $(system.defaultworkingdirectory)\temp\* -DestinationPath $(Build.ArtifactStagingDirectory)\changedfiles.zip
        errorActionPreference: 'stop'
        failOnStderr: true
        showWarnings: true
        pwsh: true

  - job: BuildBlazor
    workspace:
      clean: all
    steps:
    - checkout: self
      enabled: false

    - download: current
      displayName: 'Get XPlat Example JSONs'
      artifact: xplatеxamples
      #target:

    - task: UseDotNet@2
      displayName: 'Use .NET 6'
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - checkout: IgEditorTemplates

    - checkout: CodeGenerationLibrary

    - task: DownloadPipelineArtifact@2
      displayName: 'Get CodeExporterApp'
      inputs:
        buildType: 'specific'
        project: 'edba4b16-462e-42a0-9fa0-254d6d8a0f41'
        definition: '261'
        buildVersionToDownload: 'latestFromBranch'
        branchName: 'refs/heads/2022.2'
        artifactName: 'CodeExporterApp'
        targetPath: '$(Build.SourcesDirectory)\CodeExporterApp'

    - checkout: IgniteUIBlazorExamples
    - task: PowerShell@2
      displayName: 'Convert Blazor'
      inputs:
        targetType: 'inline'
        script: |
          $(Build.SourcesDirectory)\CodeExporterApp\CodeExporter.App.exe `
          -platform=blazor `
          -template=$(Build.SourcesDirectory)\igeditor-templates\Blazor\main-template `
          -library=$(Build.SourcesDirectory)\code-generation-library `
          -output=$(Build.SourcesDirectory)\igniteui-blazor-examples\samples\ `
          -source=$(Pipeline.Workspace)\xplatеxamples\samples\grids\,$(Pipeline.Workspace)\xplatеxamples\samples\charts\
        failOnStderr: true
        showWarnings: true
        pwsh: true

  - job: BuildReact
    workspace:
      clean: all
    steps:
    - checkout: self
      enabled: false

    - download: current
      displayName: 'Get XPlat Example JSONs'
      artifact: xplatеxamples
      #target:

    - task: UseDotNet@2
      displayName: 'Use .NET 6'
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - checkout: IgEditorTemplates

    - checkout: CodeGenerationLibrary

    - task: DownloadPipelineArtifact@2
      displayName: 'Get CodeExporterApp'
      inputs:
        buildType: 'specific'
        project: 'edba4b16-462e-42a0-9fa0-254d6d8a0f41'
        definition: '261'
        buildVersionToDownload: 'latestFromBranch'
        branchName: 'refs/heads/2022.2'
        artifactName: 'CodeExporterApp'
        targetPath: '$(Build.SourcesDirectory)\CodeExporterApp'
    - checkout: IgniteUIReactExamples
    - task: PowerShell@2
      displayName: 'Convert React'
      inputs:
        targetType: 'inline'
        script: |
          $(Build.SourcesDirectory)\CodeExporterApp\CodeExporter.App.exe `
          -platform=react `
          -template=$(Build.SourcesDirectory)\igeditor-templates\React\main-template `
          -library=$(Build.SourcesDirectory)\code-generation-library `
          -output=$(Build.SourcesDirectory)\igniteui-react-examples\samples\ `
          -source=$(Pipeline.Workspace)\xplatеxamples\samples\grids\,$(Pipeline.Workspace)\xplatеxamples\samples\charts\
        failOnStderr: true
        showWarnings: true
        pwsh: true

  - job: BuildWebComponents
    workspace:
      clean: all
    steps:
    - checkout: self
      enabled: false

    - download: current
      displayName: 'Get XPlat Example JSONs'
      artifact: xplatеxamples
      #target:

    - task: UseDotNet@2
      displayName: 'Use .NET 6.X'
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - checkout: IgEditorTemplates

    - task: DownloadPipelineArtifact@2
      displayName: 'Get CodeExporterApp'
      inputs:
        buildType: 'specific'
        project: 'edba4b16-462e-42a0-9fa0-254d6d8a0f41'
        definition: '261'
        buildVersionToDownload: 'latestFromBranch'
        branchName: 'refs/heads/2022.2'
        artifactName: 'CodeExporterApp'
        targetPath: '$(Build.SourcesDirectory)\CodeExporterApp'

    - checkout: CodeGenerationLibrary
    - checkout: IgniteUIWebComponentsExamples
    - task: PowerShell@2
      displayName: 'Convert WebComponents'
      inputs:
        targetType: 'inline'
        script: |
          $(Build.SourcesDirectory)\CodeExporterApp\CodeExporter.App.exe `
          -platform=WebComponents `
          -template=$(Build.SourcesDirectory)\igeditor-templates\WebComponents\main-template `
          -library=$(Build.SourcesDirectory)\code-generation-library `
          -output=$(Build.SourcesDirectory)\igniteui-wc-examples\samples\ `
          -source=$(Pipeline.Workspace)\xplatеxamples\samples\grids\,$(Pipeline.Workspace)\xplatеxamples\samples\charts\
        failOnStderr: true
        showWarnings: true
        pwsh: true